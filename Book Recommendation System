
Books Recommendation System
import re
import pickle
import operator
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from collections import Counter
from scipy.sparse import csr_matrix
from pandas.api.types import is_numeric_dtype
from sklearn.neighbors import NearestNeighbors
from sklearn.feature_extraction import DictVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

import warnings
warnings.filterwarnings("ignore")

Dataset
books = pd.read_csv(r"Datasets/Books.csv", delimiter=';', error_bad_lines=False, encoding='ISO-8859-1', warn_bad_lines=False)
users = pd.read_csv(r"Datasets/Users.csv", delimiter=';', error_bad_lines=False, encoding='ISO-8859-1', warn_bad_lines=False)
ratings = pd.read_csv(r"Datasets/Book-Ratings.csv", delimiter=';', error_bad_lines=False, encoding='ISO-8859-1', warn_bad_lines=False)

print("Books Data:    ", books.shape)
print("Users Data:    ", users.shape)
print("Books-ratings: ", ratings.shape)
Books Data:     (271360, 8)
Users Data:     (278858, 3)
Books-ratings:  (1149780, 3)

Pre-processing
Books Dataset Pre-processing

print("Columns: ", list(books.columns))
books.head()
Columns:  ['ISBN', 'Book-Title', 'Book-Author', 'Year-Of-Publication', 'Publisher', 'Image-URL-S', 'Image-URL-M', 'Image-URL-L']
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher	Image-URL-S	Image-URL-M	Image-URL-L
0	0195153448	Classical Mythology	Mark P. O. Morford	2002	Oxford University Press	http://images.amazon.com/images/P/0195153448.0...	http://images.amazon.com/images/P/0195153448.0...	http://images.amazon.com/images/P/0195153448.0...
1	0002005018	Clara Callan	Richard Bruce Wright	2001	HarperFlamingo Canada	http://images.amazon.com/images/P/0002005018.0...	http://images.amazon.com/images/P/0002005018.0...	http://images.amazon.com/images/P/0002005018.0...
2	0060973129	Decision in Normandy	Carlo D'Este	1991	HarperPerennial	http://images.amazon.com/images/P/0060973129.0...	http://images.amazon.com/images/P/0060973129.0...	http://images.amazon.com/images/P/0060973129.0...
3	0374157065	Flu: The Story of the Great Influenza Pandemic...	Gina Bari Kolata	1999	Farrar Straus Giroux	http://images.amazon.com/images/P/0374157065.0...	http://images.amazon.com/images/P/0374157065.0...	http://images.amazon.com/images/P/0374157065.0...
4	0393045218	The Mummies of Urumchi	E. J. W. Barber	1999	W. W. Norton &amp; Company	http://images.amazon.com/images/P/0393045218.0...	http://images.amazon.com/images/P/0393045218.0...	http://images.amazon.com/images/P/0393045218.0...
## Drop URL columns
books.drop(['Image-URL-S', 'Image-URL-M', 'Image-URL-L'], axis=1, inplace=True)
books.head()
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher
0	0195153448	Classical Mythology	Mark P. O. Morford	2002	Oxford University Press
1	0002005018	Clara Callan	Richard Bruce Wright	2001	HarperFlamingo Canada
2	0060973129	Decision in Normandy	Carlo D'Este	1991	HarperPerennial
3	0374157065	Flu: The Story of the Great Influenza Pandemic...	Gina Bari Kolata	1999	Farrar Straus Giroux
4	0393045218	The Mummies of Urumchi	E. J. W. Barber	1999	W. W. Norton &amp; Company
## Checking for null values
books.isnull().sum() 
ISBN                   0
Book-Title             0
Book-Author            1
Year-Of-Publication    0
Publisher              2
dtype: int64
books.loc[books['Book-Author'].isnull(),:]
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher
187689	9627982032	The Credit Suisse Guide to Managing Your Perso...	NaN	1995	Edinburgh Financial Publishing
books.loc[books['Publisher'].isnull(),:]
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher
128890	193169656X	Tyrant Moon	Elaine Corvidae	2002	NaN
129037	1931696993	Finders Keepers	Linnea Sinclair	2001	NaN
books.at[187689 ,'Book-Author'] = 'Other'

books.at[128890 ,'Publisher'] = 'Other'
books.at[129037 ,'Publisher'] = 'Other'
## Checking for column Year-of-publication
books['Year-Of-Publication'].unique()
array([2002, 2001, 1991, 1999, 2000, 1993, 1996, 1988, 2004, 1998, 1994,
       2003, 1997, 1983, 1979, 1995, 1982, 1985, 1992, 1986, 1978, 1980,
       1952, 1987, 1990, 1981, 1989, 1984, 0, 1968, 1961, 1958, 1974,
       1976, 1971, 1977, 1975, 1965, 1941, 1970, 1962, 1973, 1972, 1960,
       1966, 1920, 1956, 1959, 1953, 1951, 1942, 1963, 1964, 1969, 1954,
       1950, 1967, 2005, 1957, 1940, 1937, 1955, 1946, 1936, 1930, 2011,
       1925, 1948, 1943, 1947, 1945, 1923, 2020, 1939, 1926, 1938, 2030,
       1911, 1904, 1949, 1932, 1928, 1929, 1927, 1931, 1914, 2050, 1934,
       1910, 1933, 1902, 1924, 1921, 1900, 2038, 2026, 1944, 1917, 1901,
       2010, 1908, 1906, 1935, 1806, 2021, '2000', '1995', '1999', '2004',
       '2003', '1990', '1994', '1986', '1989', '2002', '1981', '1993',
       '1983', '1982', '1976', '1991', '1977', '1998', '1992', '1996',
       '0', '1997', '2001', '1974', '1968', '1987', '1984', '1988',
       '1963', '1956', '1970', '1985', '1978', '1973', '1980', '1979',
       '1975', '1969', '1961', '1965', '1939', '1958', '1950', '1953',
       '1966', '1971', '1959', '1972', '1955', '1957', '1945', '1960',
       '1967', '1932', '1924', '1964', '2012', '1911', '1927', '1948',
       '1962', '2006', '1952', '1940', '1951', '1931', '1954', '2005',
       '1930', '1941', '1944', 'DK Publishing Inc', '1943', '1938',
       '1900', '1942', '1923', '1920', '1933', 'Gallimard', '1909',
       '1946', '2008', '1378', '2030', '1936', '1947', '2011', '2020',
       '1919', '1949', '1922', '1897', '2024', '1376', '1926', '2037'],
      dtype=object)
pd.set_option('display.max_colwidth', -1)
books.loc[books['Year-Of-Publication'] == 'DK Publishing Inc',:]
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher
209538	078946697X	DK Readers: Creating the X-Men, How It All Began (Level 4: Proficient Readers)\";Michael Teitelbaum"	2000	DK Publishing Inc	http://images.amazon.com/images/P/078946697X.01.THUMBZZZ.jpg
221678	0789466953	DK Readers: Creating the X-Men, How Comic Books Come to Life (Level 4: Proficient Readers)\";James Buckley"	2000	DK Publishing Inc	http://images.amazon.com/images/P/0789466953.01.THUMBZZZ.jpg
books.loc[books['Year-Of-Publication'] == 'Gallimard',:]
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher
220731	2070426769	Peuple du ciel, suivi de 'Les Bergers\";Jean-Marie Gustave Le ClÃ?Â©zio"	2003	Gallimard	http://images.amazon.com/images/P/2070426769.01.THUMBZZZ.jpg
books.at[209538 ,'Publisher'] = 'DK Publishing Inc'
books.at[209538 ,'Year-Of-Publication'] = 2000
books.at[209538 ,'Book-Title'] = 'DK Readers: Creating the X-Men, How It All Began (Level 4: Proficient Readers)'
books.at[209538 ,'Book-Author'] = 'Michael Teitelbaum'

books.at[221678 ,'Publisher'] = 'DK Publishing Inc'
books.at[221678 ,'Year-Of-Publication'] = 2000
books.at[209538 ,'Book-Title'] = 'DK Readers: Creating the X-Men, How Comic Books Come to Life (Level 4: Proficient Readers)'
books.at[209538 ,'Book-Author'] = 'James Buckley'

books.at[220731 ,'Publisher'] = 'Gallimard'
books.at[220731 ,'Year-Of-Publication'] = '2003'
books.at[209538 ,'Book-Title'] = 'Peuple du ciel - Suivi de Les bergers '
books.at[209538 ,'Book-Author'] = 'Jean-Marie Gustave Le ClÃ?Â©zio'
## Converting year of publication in Numbers
books['Year-Of-Publication'] = books['Year-Of-Publication'].astype(int)
print(sorted(list(books['Year-Of-Publication'].unique())))
[0, 1376, 1378, 1806, 1897, 1900, 1901, 1902, 1904, 1906, 1908, 1909, 1910, 1911, 1914, 1917, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2010, 2011, 2012, 2020, 2021, 2024, 2026, 2030, 2037, 2038, 2050]
## Replacing Invalid years with max year
count = Counter(books['Year-Of-Publication'])
[k for k, v in count.items() if v == max(count.values())]
[2002]
books.loc[books['Year-Of-Publication'] > 2021, 'Year-Of-Publication'] = 2002
books.loc[books['Year-Of-Publication'] == 0, 'Year-Of-Publication'] = 2002
## Uppercasing all alphabets in ISBN
books['ISBN'] = books['ISBN'].str.upper()
## Drop duplicate rows
books.drop_duplicates(keep='last', inplace=True) 
books.reset_index(drop = True, inplace = True)
books.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 271047 entries, 0 to 271046
Data columns (total 5 columns):
 #   Column               Non-Null Count   Dtype 
---  ------               --------------   ----- 
 0   ISBN                 271047 non-null  object
 1   Book-Title           271047 non-null  object
 2   Book-Author          271047 non-null  object
 3   Year-Of-Publication  271047 non-null  int32 
 4   Publisher            271047 non-null  object
dtypes: int32(1), object(4)
memory usage: 9.3+ MB
books.head()
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher
0	0195153448	Classical Mythology	Mark P. O. Morford	2002	Oxford University Press
1	0002005018	Clara Callan	Richard Bruce Wright	2001	HarperFlamingo Canada
2	0060973129	Decision in Normandy	Carlo D'Este	1991	HarperPerennial
3	0374157065	Flu: The Story of the Great Influenza Pandemic of 1918 and the Search for the Virus That Caused It	Gina Bari Kolata	1999	Farrar Straus Giroux
4	0393045218	The Mummies of Urumchi	E. J. W. Barber	1999	W. W. Norton &amp; Company
Users Dataset Pre-processing

print("Columns: ", list(users.columns))
users.head()
Columns:  ['User-ID', 'Location', 'Age']
User-ID	Location	Age
0	1	nyc, new york, usa	NaN
1	2	stockton, california, usa	18.0
2	3	moscow, yukon territory, russia	NaN
3	4	porto, v.n.gaia, portugal	17.0
4	5	farnborough, hants, united kingdom	NaN
## Checking null values
print(users.isna().sum())               
User-ID     0     
Location    0     
Age         110762
dtype: int64
## Check for all values present in Age column
print(sorted(list(users['Age'].unique())))
[nan, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 113.0, 114.0, 115.0, 116.0, 118.0, 119.0, 123.0, 124.0, 127.0, 128.0, 132.0, 133.0, 136.0, 137.0, 138.0, 140.0, 141.0, 143.0, 146.0, 147.0, 148.0, 151.0, 152.0, 156.0, 157.0, 159.0, 162.0, 168.0, 172.0, 175.0, 183.0, 186.0, 189.0, 199.0, 200.0, 201.0, 204.0, 207.0, 208.0, 209.0, 210.0, 212.0, 219.0, 220.0, 223.0, 226.0, 228.0, 229.0, 230.0, 231.0, 237.0, 239.0, 244.0]
required = users[users['Age'] <= 80]
required = required[required['Age'] >= 10]
mean = round(required['Age'].mean())   
mean
35
users.loc[users['Age'] > 80, 'Age'] = mean    #outliers with age grater than 80 are substituted with mean 
users.loc[users['Age'] < 10, 'Age'] = mean    #outliers with age less than 10 years are substitued with mean
users['Age'] = users['Age'].fillna(mean)      #filling null values with mean
users['Age'] = users['Age'].astype(int)       #changing Datatype to int
list_ = users.Location.str.split(', ')

city = []
state = []
country = []
count_no_state = 0    
count_no_country = 0

for i in range(0,len(list_)):
    if list_[i][0] == ' ' or list_[i][0] == '' or list_[i][0]=='n/a' or list_[i][0] == ',':  #removing invalid entries too
        city.append('other')
    else:
        city.append(list_[i][0].lower())

    if(len(list_[i])<2):
        state.append('other')
        country.append('other')
        count_no_state += 1
        count_no_country += 1
    else:
        if list_[i][1] == ' ' or list_[i][1] == '' or list_[i][1]=='n/a' or list_[i][1] == ',':   #removing invalid entries 
            state.append('other')
            count_no_state += 1            
        else:
            state.append(list_[i][1].lower())
        
        if(len(list_[i])<3):
            country.append('other')
            count_no_country += 1
        else:
            if list_[i][2] == ''or list_[i][1] == ',' or list_[i][2] == ' ' or list_[i][2] == 'n/a':
                country.append('other')
                count_no_country += 1
            else:
                country.append(list_[i][2].lower())
        
users = users.drop('Location',axis=1)

temp = []
for ent in city:
    c = ent.split('/')            #handling cases where city/state entries from city list as state is already given 
    temp.append(c[0])

df_city = pd.DataFrame(temp,columns=['City'])
df_state = pd.DataFrame(state,columns=['State'])
df_country = pd.DataFrame(country,columns=['Country'])

users = pd.concat([users, df_city], axis=1)
users = pd.concat([users, df_state], axis=1)
users = pd.concat([users, df_country], axis=1)

print(count_no_country)   #printing the number of countries didnt have any values 
print(count_no_state)     #printing the states which didnt have any values
4659
16044
## Drop duplicate rows
users.drop_duplicates(keep='last', inplace=True)
users.reset_index(drop=True, inplace=True)
users.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 278858 entries, 0 to 278857
Data columns (total 5 columns):
 #   Column   Non-Null Count   Dtype 
---  ------   --------------   ----- 
 0   User-ID  278858 non-null  int64 
 1   Age      278858 non-null  int32 
 2   City     278858 non-null  object
 3   State    278858 non-null  object
 4   Country  278858 non-null  object
dtypes: int32(1), int64(1), object(3)
memory usage: 9.6+ MB
users.head()
User-ID	Age	City	State	Country
0	1	35	nyc	new york	usa
1	2	18	stockton	california	usa
2	3	35	moscow	yukon territory	russia
3	4	17	porto	v.n.gaia	portugal
4	5	35	farnborough	hants	united kingdom
Books-Ratings Dataset Pre-processing

print("Columns: ", list(ratings.columns))
ratings.head()
Columns:  ['User-ID', 'ISBN', 'Book-Rating']
User-ID	ISBN	Book-Rating
0	276725	034545104X	0
1	276726	0155061224	5
2	276727	0446520802	0
3	276729	052165615X	3
4	276729	0521795028	6
## Checking for null values
ratings.isnull().sum() 
User-ID        0
ISBN           0
Book-Rating    0
dtype: int64
## checking all ratings number or not
print(is_numeric_dtype(ratings['Book-Rating']))
True
## checking User-ID contains only number or not
print(is_numeric_dtype(ratings['User-ID']))
True
## checking ISBN
flag = 0
k =[]
reg = "[^A-Za-z0-9]"

for x in ratings['ISBN']:
    z = re.search(reg,x)    
    if z:
        flag = 1

if flag == 1:
    print("False")
else:
    print("True")
False
## removing extra characters from ISBN (from ratings dataset) existing in books dataset
bookISBN = books['ISBN'].tolist() 
reg = "[^A-Za-z0-9]" 
for index, row_Value in ratings.iterrows():
    z = re.search(reg, row_Value['ISBN'])    
    if z:
        f = re.sub(reg,"",row_Value['ISBN'])
        if f in bookISBN:
            ratings.at[index , 'ISBN'] = f
## Uppercasing all alphabets in ISBN
ratings['ISBN'] = ratings['ISBN'].str.upper()
## Drop duplicate rows
ratings.drop_duplicates(keep='last', inplace=True)
ratings.reset_index(drop=True, inplace=True)
ratings.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1149776 entries, 0 to 1149775
Data columns (total 3 columns):
 #   Column       Non-Null Count    Dtype 
---  ------       --------------    ----- 
 0   User-ID      1149776 non-null  int64 
 1   ISBN         1149776 non-null  object
 2   Book-Rating  1149776 non-null  int64 
dtypes: int64(2), object(1)
memory usage: 26.3+ MB
ratings.head()
User-ID	ISBN	Book-Rating
0	276725	034545104X	0
1	276726	0155061224	5
2	276727	0446520802	0
3	276729	052165615X	3
4	276729	0521795028	6
Merging of all three Tables
Merging Books, Users and Rating Tables in One

dataset = pd.merge(books, ratings, on='ISBN', how='inner')
dataset = pd.merge(dataset, users, on='User-ID', how='inner')
dataset.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 1031609 entries, 0 to 1031608
Data columns (total 11 columns):
 #   Column               Non-Null Count    Dtype 
---  ------               --------------    ----- 
 0   ISBN                 1031609 non-null  object
 1   Book-Title           1031609 non-null  object
 2   Book-Author          1031609 non-null  object
 3   Year-Of-Publication  1031609 non-null  int32 
 4   Publisher            1031609 non-null  object
 5   User-ID              1031609 non-null  int64 
 6   Book-Rating          1031609 non-null  int64 
 7   Age                  1031609 non-null  int32 
 8   City                 1031609 non-null  object
 9   State                1031609 non-null  object
 10  Country              1031609 non-null  object
dtypes: int32(2), int64(2), object(7)
memory usage: 86.6+ MB
Divide complete data on the basis of Implicit and Explicit ratings datasets

## Explicit Ratings Dataset
dataset1 = dataset[dataset['Book-Rating'] != 0]
dataset1 = dataset1.reset_index(drop = True)
dataset1.shape
(384074, 11)
## Implicit Ratings Dataset
dataset2 = dataset[dataset['Book-Rating'] == 0]
dataset2 = dataset2.reset_index(drop = True)
dataset2.shape
(647535, 11)
dataset1.head()
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher	User-ID	Book-Rating	Age	City	State	Country
0	0002005018	Clara Callan	Richard Bruce Wright	2001	HarperFlamingo Canada	8	5	35	timmins	ontario	canada
1	074322678X	Where You'll Find Me: And Other Stories	Ann Beattie	2002	Scribner	8	5	35	timmins	ontario	canada
2	0887841740	The Middle Stories	Sheila Heti	2004	House of Anansi Press	8	5	35	timmins	ontario	canada
3	1552041778	Jane Doe	R. J. Kaiser	1999	Mira Books	8	5	35	timmins	ontario	canada
4	1567407781	The Witchfinder (Amos Walker Mystery Series)	Loren D. Estleman	1998	Brilliance Audio - Trade	8	6	35	timmins	ontario	canada
Data Visualization
publications = {}
for year in books['Year-Of-Publication']:
    if str(year) not in publications:
        publications[str(year)] = 0
    publications[str(year)] +=1

publications = {k:v for k, v in sorted(publications.items())}

fig = plt.figure(figsize =(55, 15))
plt.bar(list(publications.keys()),list(publications.values()), color = 'blue')
plt.ylabel("Number of books published")
plt.xlabel("Year of Publication")
plt.title("Number of books published yearly")
plt.margins(x = 0)
plt.show()

plt.figure(figsize=(15,6))
sns.countplot(y="Book-Author", data=books,order=books['Book-Author'].value_counts().index[0:15])
plt.title("No of books by an author (Top 15)")
Text(0.5, 1.0, 'No of books by an author (Top 15)')

plt.figure(figsize=(15,6))
sns.countplot(y="Publisher", data=books,order=books['Publisher'].value_counts().index[0:15])
plt.title("No of books published by a publisher (Top 15)")
Text(0.5, 1.0, 'No of books published by a publisher (Top 15)')

plt.figure(figsize=(8,6))
sns.countplot(x="Book-Rating", data=ratings)
<AxesSubplot:xlabel='Book-Rating', ylabel='count'>

## Explicit Ratings
plt.figure(figsize=(8,6))
data = ratings[ratings['Book-Rating'] != 0]
sns.countplot(x="Book-Rating", data=data)
plt.title("Explicit Ratings")
Text(0.5, 1.0, 'Explicit Ratings')

plt.figure(figsize=(8,6))
users.Age.hist(bins=[10*i for i in range(1, 10)])     
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(20,6))
sns.countplot(x="City", data=users,order=users['City'].value_counts().index[0:15])
plt.title("No of readers from each city (Top 15)")
Text(0.5, 1.0, 'No of readers from each city (Top 15)')

plt.figure(figsize=(20,6))
sns.countplot(x="State", data=users,order=users['State'].value_counts().index[0:15])
plt.title("No of readers from each state (Top 15)")
Text(0.5, 1.0, 'No of readers from each state (Top 15)')

plt.figure(figsize=(15,8))
sns.countplot(y="Country", data=users, order=users['Country'].value_counts().index[0:10])
plt.title("No of readers from each country (Top 10)")
Text(0.5, 1.0, 'No of readers from each country (Top 10)')

data=users[users['Country']=='usa']
plt.figure(figsize=(20,6))
sns.countplot(x="State", data=data,order=data['State'].value_counts().index[0:15])
plt.title("No of readers from states of USA (Top 15)")
Text(0.5, 1.0, 'No of readers from states of USA (Top 15)')

plt.figure(figsize=(15,8))
sns.countplot(y="Book-Title", data=dataset, order=dataset['Book-Title'].value_counts().index[0:15])
plt.title("Number of Ratings for a book (Top 15)")
Text(0.5, 1.0, 'Number of Ratings for a book (Top 15)')

Recommendation Systems
bookName = input("Enter a book name: ")
number = int(input("Enter number of books to recommend: "))

# Harry Potter and the Sorcerer's Stone (Harry Potter (Paperback))
Enter a book name: Harry Potter and the Sorcerer's Stone (Harry Potter (Paperback))
Enter number of books to recommend: 5
1. Popularity Based (Top In whole collection)
def popularity_based(dataframe, n):
    if n >= 1 and n <= len(dataframe):
        data = pd.DataFrame(dataframe.groupby('ISBN')['Book-Rating'].count()).sort_values('Book-Rating', ascending=False).head(n)
        result = pd.merge(data, books, on='ISBN', left_index = True)
        return result
    return "Invalid number of books entered!!"
print("Top", number, "Popular books are: ")
popularity_based(dataset1, number)
Top 5 Popular books are: 
ISBN	Book-Rating	Book-Title	Book-Author	Year-Of-Publication	Publisher
401	0316666343	707	The Lovely Bones: A Novel	Alice Sebold	2002	Little, Brown
26	0971880107	581	Wild Animus	Rich Shapero	2004	Too Far
734	0385504209	488	The Da Vinci Code	Dan Brown	2003	Doubleday
513	0312195516	383	The Red Tent (Bestselling Backlist)	Anita Diamant	1998	Picador USA
1086	0060928336	320	Divine Secrets of the Ya-Ya Sisterhood: A Novel	Rebecca Wells	1997	Perennial
2. Popularity Based (Top In a given place)
def search_unique_places(dataframe, place):
    place = place.lower()

    if place in list(dataframe['City'].unique()):
        return dataframe[dataframe['City'] == place]
    elif place in list(dataframe['State'].unique()):
        return dataframe[dataframe['State'] == place]
    elif place in list(dataframe['Country'].unique()):
        return dataframe[dataframe['Country'] == place]
    else:
        return "Invalid Entry"
place = input("Enter the name of place: ")
data = search_unique_places(dataset1, place)

if isinstance(data, pd.DataFrame):
    data = popularity_based(data, number)

data
Enter the name of place: India
ISBN	Book-Rating	Book-Title	Book-Author	Year-Of-Publication	Publisher
26	0971880107	3	Wild Animus	Rich Shapero	2004	Too Far
166	0671047612	2	Skin And Bones	Franklin W. Dixon	2000	Aladdin
164	0486284735	2	Pride and Prejudice (Dover Thrift Editions)	Jane Austen	1995	Dover Publications
9596	8171670407	2	Inscrutable Americans	Mathur Anurag	1996	South Asia Books
72379	0006944035	1	Secret Island / Secret Mountain (Two-in-ones)	Enid Blyton	1994	HarperCollins Publishers

3. Books by same author, publisher of given book name
def printBook(k, n):
    z = k['Book-Title'].unique()
    for x in range(len(z)):
        print(z[x])
        if x >= n-1:
            break
def get_books(dataframe, name, n):
    print("\nBooks by same Author:\n")
    au = dataframe['Book-Author'].unique()

    data = dataset1[dataset1['Book-Title'] != name]

    if au[0] in list(data['Book-Author'].unique()):
        k2 = data[data['Book-Author'] == au[0]]
    k2 = k2.sort_values(by=['Book-Rating'])
    printBook(k2, n)

    print("\n\nBooks by same Publisher:\n")
    au = dataframe['Publisher'].unique()

    if au[0] in list(data['Publisher'].unique()):
        k2 = pd.DataFrame(data[data['Publisher'] == au[0]])
    k2=k2.sort_values(by=['Book-Rating']) 
    printBook(k2, n)
if bookName in list(dataset1['Book-Title'].unique()):
    d = dataset1[dataset1['Book-Title'] == bookName]
    get_books(d, bookName, number)
else:
    print("Invalid Book Name!!")
Books by same Author:

Harry Potter and the Goblet of Fire (Book 4)
Harry Potter and the Order of the Phoenix (Book 5)
Harry Potter y el cÃ¡liz de fuego
Harry Potter and the Chamber of Secrets (Book 2)
Harry Potter and the Sorcerer's Stone (Book 1)


Books by same Publisher:

The Seeing Stone
The Slightly True Story of Cedar B. Hartley: Who Planned to Live an Unusual Life
Harry Potter and the Chamber of Secrets (Harry Potter)
The Story of the Seagull and the Cat Who Taught Her To Fly
Book! Book! Book!
4. Books popular Yearly
data = pd.DataFrame(dataset1.groupby('ISBN')['Book-Rating'].count()).sort_values('Book-Rating', ascending=False)
data = pd.merge(data, books, on='ISBN', left_index = True)

years = set()
indices = []
for ind, row in data.iterrows():
    if row['Year-Of-Publication'] in years:
        indices.append(ind)
    else:
        years.add(row['Year-Of-Publication'])

data = data.drop(indices)
data = data.drop('Book-Rating', axis = 1)
data = data.sort_values('Year-Of-Publication')

pd.set_option("display.max_rows", None, "display.max_columns", None)
data
ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher
253437	964442011X	Tasht-i khun	IsmaÂ°il Fasih	1376	Nashr-i Alburz
227222	9643112136	Dalan-i bihisht (Dastan-i Irani)	Nazi Safavi	1378	Intisharat-i Quqnus
171529	0781228956	Complete Works 10 Volumes [2,6,7,8,9] (Notable American Authors)	Benjamin Franklin	1806	Reprint Services Corp
211547	1551103982	The Cycling Adventures of Coconut Head: A North American Odyssey	Ted Schredd	1900	Graphic Arts Center Pub Co
262204	0671397214	JOY OF MUSIC P	Leonard Bernstein	1901	Fireside
102242	0373226888	Tommy's Mom	Linda O. Johnston	1902	Harlequin
45599	038528120X	CATCH 22	JOSEPH HELLER	1904	Delta
170683	0404089119	Charlotte Bronte and Her Sisters	Clement K. Shorter	1906	Ams Pr
159472	0911662251	Kybalion: A Study of the Hermetic Philosophy of Ancient Egypt and Greece	Three Initiates	1908	Yoga Publication Society
191891	0892760508	New Birth	Kenneth Hagin	1911	Faith Library Publications
8369	0684717603	The GREAT GATSBY (Scribner Classic)	F. Scott Fritzgerald	1920	Scribner Paper Fiction
60245	0440745454	HOW TO EAT FRIED WORMS	THOMAS ROCKWELL	1923	Yearling
198308	0486600815	Principle of Relativity (Dover Books on Physics)	Albert Einstein	1924	Dover Publications
120296	0023381205	Great Gatsby, The	F. Scott Fitzgerald	1925	Prentice Hall
34910	0684718081	The Sun Also Rises	Ernest Hemingway	1926	Scribner Book Company
62792	0448089033	The Secret of the Old Mill (The Hardy Boys Mystery Stories, Book 3)	Franklin W. Dixon	1927	Grosset &amp; Dunlap
182072	9997520858	Beau Ideal	Percival C. Wren	1928	Stokes Pub Co
54024	0684717972	Farewell to Arms	Ernest Hemingway	1929	Charles Scribner's Sons
11326	0448095017	The Secret of the Old Clock (Nancy Drew Mystery Stories, No 1)	Carolyn Keene	1930	Grosset &amp; Dunlap
167762	074752694X	Bloomsbury Good Reading Guide	Kenneth McLeish	1931	Trafalgar Square Publishing
51668	0448095076	The Clue in the Diary (Nancy Drew Mystery Stories Number 7)	Carolyn Keene	1932	Imagination Studio
171066	0804617279	Legends of Angria,	Charlotte Bronte	1933	Gateway/Associated Faculty Pr
80855	0961505109	Narrow Land: Folk Chronicles of Old Cape Cod (Chatham Historical Society)	Elizabeth Reynard	1934	Parnassus Press
186151	0882436600	Through the Bible Book by Book: Genesis to Esthe/Part 1 (Through the Bible Book by Book)	Myer Pearlman	1935	Gospel Publishing House
11012	068483068X	Gone With the Wind	Margaret Mitchell	1936	Scribner
102614	0802812201	Descent into Hell	Charles Williams	1937	Wm. B. Eerdmans Publishing Company
36471	0395071224	The Hobbit	J. R. R. Tolkien	1938	Houghton Mifflin Company
42375	999750805X	The Happy Highwayman	Leslie Charteris	1939	Doubleday
5931	044808919X	Disappearing Floor (Hardy Boys Mystery Stories)	Franklin W. Dixon	1940	Grosset &amp; Dunlap
92485	0448089203	Mystery of the Flying Express, (Hardy Boys Mystery Stories)	Franklin W. Dixon	1941	Grosset &amp; Dunlap
2038	0060901012	Brave New World &amp; Brave New World Revisited	Aldous Huxley	1942	Perennial
81316	0152465030	The Little Prince	Antoine De Saint-Exupery	1943	Harcourt
207770	0394906012	The Black Stallion	WALTER FARLEY	1944	Random House Books for Young Readers
61127	0060263954	Stuart Little 60th Anniversary Edition	E. B. White	1945	HarperCollins
10647	0448060043	Alice in Wonderland and Through the Looking Glass (Illustrated Junior Library)	Charles Lutwidge Dodgson	1946	Grosset &amp; Dunlap
20297	0448095246	The Clue in the Old Album (Nancy Drew Mystery Stories, No 24)	Carolyn Keene	1947	Grosset &amp; Dunlap
104768	0875160476	Secret Science Behind Miracles	Max F. Long	1948	DeVorss &amp; Company
79388	0448095262	Clue of the Leaning Chimney (Nancy Drew (Hardcover))	Carolyn Keene	1949	Grosset &amp; Dunlap
2959	0553213601	Cyrano De Bergerac (Bantam Classics)	EDMOND ROSTAND	1950	Bantam
18916	081120068X	Siddhartha	Hermann Hesse	1951	New Directions Publishing Corporation
54034	0060263857	Charlotte's Web	E. B. White	1952	Harpercollins Juvenile Books
15503	0064400026	Little House on the Prairie	Laura Ingalls Wilder	1953	HarperTrophy
20725	0395083567	My Antonia	Willa Sibert Cather	1954	Houghton Mifflin
15808	0156838389	Sophocles, The Oedipus Cycle: Oedipus Rex, Oedipus at Colonus, Antigone	Dudley Fitts	1955	Harvest Books
1685	0872860175	Howl and Other Poems (Pocket Poets)	Allen Ginsberg	1956	City Lights Publishers
198221	039480001X	The Cat in the Hat	Dr. Seuss	1957	Random House Books for Young Readers
20061	0394800028	The Cat in the Hat Comes Back (I Can Read It All by Myself Beginner Books)	Dr. Seuss	1958	Random House Books for Young Readers
1735	0399501487	Lord of the Flies	William Gerald Golding	1959	Perigee Trade
21611	0394800168	Green Eggs and Ham (I Can Read It All by Myself Beginner Books)	Dr. Seuss	1960	Random House Books for Young Readers
6394	0394800206	Go, Dog, Go (I Can Read It All by Myself Beginner Books)	Philip D. Eastman	1961	Random House Children's Books
99197	0140441212	Bhagavad Gita (Penguin Classics)	Juan Mascaro	1962	Penguin Books
26155	039480029X	Hop on Pop (I Can Read It All by Myself Beginner Books)	Dr. Seuss	1963	Random House Books for Young Readers
13198	0060256656	The Giving Tree	Shel Silverstein	1964	HarperCollins Publishers
461	0553210092	The Scarlet Letter	NATHANIEL HAWTHORNE	1965	Bantam
10390	055314300X	Bourne Identity	Robert Ludlum	1966	Bantam Doubleday Dell
28552	0140430229	Gulliver's Travels (Penguin Classics)	Jonathan Swift	1967	Penguin Books
382	0156528207	The Little Prince	Antoine de Saint-ExupÃ©ry	1968	Harcourt
22813	0440435749	The High King (Chronicles of Prydain (Paperback))	LLOYD ALEXANDER	1969	Yearling
9370	0020442203	Lion, the Witch and the Wardrobe	C.S. Lewis	1970	MacMillan Publishing Company.
4157	0440439884	Island of the Blue Dolphins	SCOTT O'DELL	1971	Random House Children's Books
8123	0553213695	The Metamorphosis (Bantam Classics)	FRANZ KAFKA	1972	Bantam
1373	0394404289	The Prophet	Kahlil Gibran	1973	Alfred A. Knopf
3805	0064400557	Charlotte's Web (Trophy Newbery)	E. B. White	1974	HarperTrophy
36200	038000321X	Alive : The Story of the Andes Survivors (Avon Nonfiction)	Piers Paul Read	1975	Avon
3138	0380002930	Watership Down	Richard Adams	1976	Avon
462	0553258524	Dragonsong (Harper Hall Trilogy)	Anne McCaffrey	1977	Bantam
1190	0380018179	The Thorn Birds	Colleen McCullough	1978	Avon
8390	0440901588	A Swiftly Tilting Planet	Madeleine L'Engle	1979	Laure Leaf
3574	0671250671	ROAD LESS TRAVELED : A New Psychology of Love, Traditional Values, and Spritual Growth (Touchstone Books (Paperback))	M. Scott Peck	1980	Touchstone
3236	0553208845	Siddhartha	Hermann Hesse	1981	Bantam Classics
3709	0553272535	Night	Elie Wiesel	1982	Bantam Books
72	0140067477	The Tao of Pooh	Benjamin Hoff	1983	Penguin Books
14845	0553250426	The Clan of the Cave Bear (Earth's Children (Paperback))	Jean M. Auel	1984	Bantam Books
2525	0671617028	The Color Purple	Alice Walker	1985	Pocket Books
3320	0345339681	The Hobbit : The Enchanting Prelude to The Lord of the Rings	J.R.R. TOLKIEN	1986	Del Rey
2202	0345342968	Fahrenheit 451	RAY BRADBURY	1987	Del Rey
37	0446310786	To Kill a Mockingbird	Harper Lee	1988	Little Brown &amp; Company
507	0060915544	The Bean Trees	Barbara Kingsolver	1989	Perennial
1366	0345361792	A Prayer for Owen Meany	John Irving	1990	Ballantine Books
89	0316769487	The Catcher in the Rye	J.D. Salinger	1991	Little, Brown
119226	044021145X	The Firm	John Grisham	1992	Bantam Dell Publishing Group
2497	0345337662	Interview with the Vampire	Anne Rice	1993	Ballantine Books
66	0804106304	The Joy Luck Club	Amy Tan	1994	Prentice Hall (K-12)
113954	067976402X	Snow Falling on Cedars	David Guterson	1995	Vintage Books USA
1087	0671003755	She's Come Undone (Oprah's Book Club (Paperback))	Wally Lamb	1996	Washington Square Press
1086	0060928336	Divine Secrets of the Ya-Ya Sisterhood: A Novel	Rebecca Wells	1997	Perennial
513	0312195516	The Red Tent (Bestselling Backlist)	Anita Diamant	1998	Picador USA
77151	059035342X	Harry Potter and the Sorcerer's Stone (Harry Potter (Paperback))	J. K. Rowling	1999	Arthur A. Levine Books
4385	0375727345	House of Sand and Fog	Andre Dubus III	2000	Vintage Books
188607	044023722X	A Painted House	John Grisham	2001	Dell Publishing Company
401	0316666343	The Lovely Bones: A Novel	Alice Sebold	2002	Little, Brown
734	0385504209	The Da Vinci Code	Dan Brown	2003	Doubleday
26	0971880107	Wild Animus	Rich Shapero	2004	Too Far
38359	1881273156	The Five Love Languages: Five Love Languages	Gary Chapman	2005	Moody Publishers
199845	1903436346	The Winter's Tale - Arden Shakespeare : Third Series - Hardback (Arden Shakespeare Third Series)	John Pitcher	2006	Arden
147061	0743457226	Deep Waters	Jayne Ann Krentz	2010	Pocket
235114	0394172116	Monkey (An Evergreen Book, E-112)	Cheng-En Wu	2011	Grove Press
91906	068107468X	Edgar Allen Poe Collected Poems	Edgar Allan Poe	2020	Bausch &amp; Lombard
183474	0590085417	Heidi	Johanna Spyri	2021	Scholastic

5. Average Weighted Ratings
def avgRating(newdf, df):
    newdf['Average Rating'] = 0
    for x in range(len(newdf)):
        l = list(df.loc[df['Book-Title'] == newdf['Book-Title'][x]]['Book-Rating'])
        newdf['Average Rating'][x] = sum(l)/len(l)
    return newdf

df = pd.DataFrame(dataset1['Book-Title'].value_counts())
df['Total-Ratings'] = df['Book-Title']
df['Book-Title'] = df.index
df.reset_index(level=0, inplace=True)
df = df.drop('index',axis=1)

# df = avgRating(df, dataset1)
# df.to_pickle('weightedData')
df = pd.read_pickle('weightedData')
## C - Mean vote across the whole
C = df['Average Rating'].mean()

## Minimum number of votes required to be in the chart
m = df['Total-Ratings'].quantile(0.90)
def weighted_rating(x, m=m, C=C): 
    v = x['Total-Ratings']    #v - number of votes
    R = x['Average Rating']   #R - Average Rating   
    return (v/(v+m) * R) + (m/(m+v) * C)
df = df.loc[df['Total-Ratings'] >= m]

df['score'] = df.apply(weighted_rating, axis=1)
df = df.sort_values('score', ascending=False)

print("Recommended Books:-\n")
df.head(number)
Recommended Books:-

Book-Title	Total-Ratings	Average Rating	score
4794	Postmarked Yesteryear: 30 Rare Holiday Postcards	11	10	9.189906
7272	The Sneetches and Other Stories	8	10	9.002961
17	Harry Potter and the Prisoner of Azkaban (Book 3)	277	9	8.971768
28	Harry Potter and the Goblet of Fire (Book 4)	247	9	8.968407
42	Harry Potter and the Order of the Phoenix (Book 5)	211	9	8.963141

6. Collaborative Filtering (User-Item Filtering)
Selecting books with total ratings equals to or more than 50 (Because of availability of limited resources)

df = pd.DataFrame(dataset1['Book-Title'].value_counts())
df['Total-Ratings'] = df['Book-Title']
df['Book-Title'] = df.index
df.reset_index(level=0, inplace=True)
df = df.drop('index',axis=1)

df = dataset1.merge(df, left_on = 'Book-Title', right_on = 'Book-Title', how = 'left')
df = df.drop(['Year-Of-Publication','Publisher','Age','City','State','Country'], axis=1)

popularity_threshold = 50
popular_book = df[df['Total-Ratings'] >= popularity_threshold]
popular_book = popular_book.reset_index(drop = True)
User - Item Collaborative Filtering

testdf = pd.DataFrame()
testdf['ISBN'] = popular_book['ISBN']
testdf['Book-Rating'] = popular_book['Book-Rating']
testdf['User-ID'] = popular_book['User-ID']
testdf = testdf[['User-ID','Book-Rating']].groupby(testdf['ISBN'])
listOfDictonaries=[]
indexMap = {}
reverseIndexMap = {}
ptr=0

for groupKey in testdf.groups.keys():
    tempDict={}
    groupDF = testdf.get_group(groupKey)
    for i in range(0,len(groupDF)):
        tempDict[groupDF.iloc[i,0]] = groupDF.iloc[i,1]
    indexMap[ptr]=groupKey
    reverseIndexMap[groupKey] = ptr
    ptr=ptr+1
    listOfDictonaries.append(tempDict)

dictVectorizer = DictVectorizer(sparse=True)
vector = dictVectorizer.fit_transform(listOfDictonaries)
pairwiseSimilarity = cosine_similarity(vector)
def printBookDetails(bookID):
    print(dataset1[dataset1['ISBN']==bookID]['Book-Title'].values[0])
    """
    print("Title:", dataset1[dataset1['ISBN']==bookID]['Book-Title'].values[0])
    print("Author:",dataset1[dataset['ISBN']==bookID]['Book-Author'].values[0])
    #print("Printing Book-ID:",bookID)
    print("\n")
    """

def getTopRecommandations(bookID):
    collaborative = []
    row = reverseIndexMap[bookID]
    print("Input Book:")
    printBookDetails(bookID)
    
    print("\nRECOMMENDATIONS:\n")
    
    mn = 0
    similar = []
    for i in np.argsort(pairwiseSimilarity[row])[:-2][::-1]:
          if dataset1[dataset1['ISBN']==indexMap[i]]['Book-Title'].values[0] not in similar:
                if mn>=number:
                      break
                mn+=1
                similar.append(dataset1[dataset1['ISBN']==indexMap[i]]['Book-Title'].values[0])
                printBookDetails(indexMap[i])
                collaborative.append(dataset1[dataset1['ISBN']==indexMap[i]]['Book-Title'].values[0])
    return collaborative
k = list(dataset1['Book-Title'])
m = list(dataset1['ISBN'])

collaborative = getTopRecommandations(m[k.index(bookName)])
Input Book:
Harry Potter and the Sorcerer's Stone (Harry Potter (Paperback))

RECOMMENDATIONS:

Harry Potter and the Prisoner of Azkaban (Book 3)
Harry Potter and the Goblet of Fire (Book 4)
Harry Potter and the Order of the Phoenix (Book 5)
Harry Potter and the Chamber of Secrets (Book 2)
Fried Green Tomatoes at the Whistle Stop Cafe

7. Correlation Based
popularity_threshold = 50

user_count = dataset1['User-ID'].value_counts()
data = dataset1[dataset1['User-ID'].isin(user_count[user_count >= popularity_threshold].index)]
rat_count = data['Book-Rating'].value_counts()
data = data[data['Book-Rating'].isin(rat_count[rat_count >= popularity_threshold].index)]

matrix = data.pivot_table(index='User-ID', columns='ISBN', values = 'Book-Rating').fillna(0)
average_rating = pd.DataFrame(dataset1.groupby('ISBN')['Book-Rating'].mean())
average_rating['ratingCount'] = pd.DataFrame(ratings.groupby('ISBN')['Book-Rating'].count())
average_rating.sort_values('ratingCount', ascending=False).head()
Book-Rating	ratingCount
ISBN		
0971880107	4.390706	2502
0316666343	8.185290	1295
0385504209	8.426230	884
0060928336	7.887500	732
0312195516	8.182768	723
isbn = books.loc[books['Book-Title'] == bookName].reset_index(drop = True).iloc[0]['ISBN']
row = matrix[isbn]
correlation = pd.DataFrame(matrix.corrwith(row), columns = ['Pearson Corr'])
corr = correlation.join(average_rating['ratingCount'])

res = corr.sort_values('Pearson Corr', ascending=False).head(number+1)[1:].index
corr_books = pd.merge(pd.DataFrame(res, columns = ['ISBN']), books, on='ISBN')
print("\n Recommended Books: \n")
corr_books
 Recommended Books: 

ISBN	Book-Title	Book-Author	Year-Of-Publication	Publisher
0	0439064872	Harry Potter and the Chamber of Secrets (Book 2)	J. K. Rowling	2000	Scholastic
1	0439136369	Harry Potter and the Prisoner of Azkaban (Book 3)	J. K. Rowling	2001	Scholastic
2	0439139597	Harry Potter and the Goblet of Fire (Book 4)	J. K. Rowling	2000	Scholastic
3	0804115613	Fried Green Tomatoes at the Whistle Stop Cafe	Fannie Flagg	2000	Ballantine Books
4	0439139600	Harry Potter and the Goblet of Fire (Book 4)	J. K. Rowling	2002	Scholastic Paperbacks
8. Nearest Neighbours Based
data = (dataset1.groupby(by = ['Book-Title'])['Book-Rating'].count().reset_index().
        rename(columns = {'Book-Rating': 'Total-Rating'})[['Book-Title', 'Total-Rating']])

result = pd.merge(data, dataset1, on='Book-Title', left_index = True)
result = result[result['Total-Rating'] >= popularity_threshold]
result = result.reset_index(drop = True)

matrix = result.pivot_table(index = 'Book-Title', columns = 'User-ID', values = 'Book-Rating').fillna(0)
up_matrix = csr_matrix(matrix)
model = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
model.fit(up_matrix)

distances, indices = model.kneighbors(matrix.loc[bookName].values.reshape(1, -1), n_neighbors = number+1)
print("\nRecommended books:\n")
for i in range(0, len(distances.flatten())):
    if i > 0:
        print(matrix.index[indices.flatten()[i]]) 
Recommended books:

Harry Potter and the Chamber of Secrets (Book 2)
Harry Potter and the Prisoner of Azkaban (Book 3)
Harry Potter and the Goblet of Fire (Book 4)
Harry Potter and the Order of the Phoenix (Book 5)
The Fellowship of the Ring (The Lord of the Rings, Part 1)
9. Content Based
popularity_threshold = 80
popular_book = df[df['Total-Ratings'] >= popularity_threshold]
popular_book = popular_book.reset_index(drop = True)
popular_book.shape
(44652, 6)
tf = TfidfVectorizer(ngram_range=(1, 2), min_df = 1, stop_words='english')
tfidf_matrix = tf.fit_transform(popular_book['Book-Title'])
tfidf_matrix.shape
(44652, 1112)
normalized_df = tfidf_matrix.astype(np.float32)
cosine_similarities = cosine_similarity(normalized_df, normalized_df)
cosine_similarities.shape
print("Recommended Books:\n")
isbn = books.loc[books['Book-Title'] == bookName].reset_index(drop = True).iloc[0]['ISBN']
content = []

idx = popular_book.index[popular_book['ISBN'] == isbn].tolist()[0]
similar_indices = cosine_similarities[idx].argsort()[::-1]
similar_items = []
for i in similar_indices:
    if popular_book['Book-Title'][i] != bookName and popular_book['Book-Title'][i] not in similar_items and len(similar_items) < number:
        similar_items.append(popular_book['Book-Title'][i])
        content.append(popular_book['Book-Title'][i])

for book in similar_items:
    print(book)
Recommended Books:

Harry Potter and the Sorcerer's Stone (Book 1)
Harry Potter and the Goblet of Fire (Book 4)
Harry Potter and the Chamber of Secrets (Book 2)
Harry Potter and the Prisoner of Azkaban (Book 3)
Harry Potter and the Order of the Phoenix (Book 5)

10. Hybrid Approach (Content+Collaborative) Using percentile
z = list()
k = float(1/number)
for x in range(number):
      z.append(1-k*x)

dictISBN = {}
for x in collaborative:
      dictISBN[x] = z[collaborative.index(x)]

for x in content:
    if x not in dictISBN:
        dictISBN[x] = z[content.index(x)]
    else:
        dictISBN[x] += z[content.index(x)]

ISBN = dict(sorted(dictISBN.items(),key=operator.itemgetter(1),reverse=True))
w=0
print("Input Book:\n")
print(bookName)
print("\nRecommended Books:\n")
for x in ISBN.keys():
    if w>=number:
        break
    w+=1
    print(x)
Input Book:

Harry Potter and the Sorcerer's Stone (Harry Potter (Paperback))

Recommended Books:

Harry Potter and the Goblet of Fire (Book 4)
Harry Potter and the Prisoner of Azkaban (Book 3)
Harry Potter and the Sorcerer's Stone (Book 1)
Harry Potter and the Chamber of Secrets (Book 2)
Harry Potter and the Order of the Phoenix (Book 5)
 
 
 
